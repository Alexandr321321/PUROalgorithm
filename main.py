import numpy
import scipy
from scipy import stats

#Стартовая функция для определения количества экспертов и оценок (вопросов)
def start():
    #Ввод количества экспертов
    experts = int(input("Введите количество экспертов:\n"))
    #Вывод количества экспертов
    print(f"Количество экспертов = {experts}")
    #Ввод количества оценок (вопросов)
    questions = int(input("Введите количество оценок:\n"))
    #Ввывод количества оценок (вопросов)
    print(f"Количество оценок = {questions}")
    #Возвращение количества экспертов и оценок (вопросов)
    return experts, questions

#Функция заполнения двумерного массива оценок (вопросов) и экспертов
def fillMas(experts, questions):
    #Определение пустого двумерного массива
    mas = [0] * questions
    for i in range(questions):
        mas[i] = [0] * experts
    #Цикл прохода по двумерному массиву
    for i in range(questions):
        for i2 in range(experts):
            #Сообщение о необходимости ввода определенной оценки определенного эксперта
            print(f"Введите оценку {i + 1} эксперта {i2 + 1}:")
            #Ввод определенной оценки определенного эксперта
            mas[i][i2] = int(input())
    #Сообщение о выводе матрицы
    print()
    print("Здаствуйте ваша матрица:")
    print()
    #Вывод матрицы
    for i in range(len(mas)):
        for i2 in range(len(mas[i])):
            print("{:4d}".format(mas[i][i2]), end="")
        print()
    print()
    #Возвращение двумерного массива
    return mas

#Определение минимальной оценки для каждого вопроса в словарь (на вход идёт двумерный массив оценок экспертов)
def fillMasMin(mas):
    #Определение пустого словаря
    dicMin = {}
    #Цикл по вопросам
    for i in range(len(mas)):
        #Определение стартового минимального значения
        min = mas[i][0]
        #Цикл по экспертам
        for j in range(len(mas[0])):
            #Если минимальное значение больше текущего значения цикла, то минимальное значение принимает текущее значение цикла
            if min > mas[i][j]:
                min = mas[i][j]
        #Добавление значения в словарь
        dicMin[i+1] = min
    #Возвращение словаря
    return dicMin

#Определение максимальной оценки для каждого вопроса в словарь (на вход идёт двумерный массив оценок экспертов)
def fillMasMax(mas):
    #Определение пустого словаря
    dicMax = {}
    #Цикл по вопросам
    for i in range(len(mas)):
        #Определение стартового максимального значения
        max = mas[i][0]
        #Цикл по экспертам
        for j in range(len(mas[0])):
            #Если максимальное значение меньше текущего значения цикла, то максимальное значение принимает текущее значение цикла
            if max < mas[i][j]:
                max = mas[i][j]
        #Добавление значения в словарь
        dicMax[i+1] = max
    #Возвращение словаря
    return dicMax

#Определение средней оценки для каждого вопроса в словарь (на вход идёт двумерный массив оценок экспертов)
def fillMasAvg(mas):
    #Определение пустого словаря
    dicAvg = {}
    # Цикл по вопросам
    for i in range(len(mas)):
        #Определение суммы значений
        sum = 0
        #Цикл по экспертам
        for j in range(len(mas[0])):
            #Увеличение суммы
            sum += mas[i][j]
        #Добавление значения в словарь
        dicAvg[i + 1] = sum/len(mas[0])
    #Возвращение словаря
    return dicAvg




#Определение количества экспертов и оценок (вопросов)
experts, questions = start()
#Заполнение двумерного массива
mas = fillMas(experts, questions)
#Заполнение словаря минимальных оценок экспертов (ключ - номер оценки (вопроса), значение - минимальная значение оценки (вопроса))
dicMin = fillMasMin(mas)
print(dicMin.items())
#Заполнение словаря максимальных оценок экспертов (ключ - номер оценки (вопроса), значение - минимальная значение оценки (вопроса))
dicMax = fillMasMax(mas)
print(dicMax.items())
#Заполнение словаря средних оценок экспертов (ключ - номер оценки (вопроса), значение - минимальная значение оценки (вопроса))
dicAvg = fillMasAvg(mas)
print(dicAvg.items())
#Рассчет корреляции Спирмена с соответствующим значением p
rho, pval = stats.spearmanr(mas)
print()
print("rho")
print(rho)
print()
print("pval")
print(pval)
